<?php/////////////////////////////////////////////////////////////////////////////////// Licensed Source Code - Property of f-project.net//// Â© Copyright f-project.net 2013. All Rights Reserved./////////////////////////////////////////////////////////////////////////////////class ProjectController extends Controller{    /* ************************************************************************     *     * Gii Generated properties and methods     *     *********************************************************************** */	/**	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning	 * using two-column layout. See 'protected/views/layouts/column2.php'.	 */	public $layout='//layouts/column2';	/**	 * @return array action filters	 */	public function filters()	{		return array(			'accessControl', // perform access control for CRUD operations			'postOnly + delete', // we only allow deletion via POST request		);	}	/**	 * Displays a particular model.	 * @param integer $id the ID of the model to be displayed	 */    //20130601 Modified : Replace Gii generated code to apply project context    //and display issues list in project view	public function actionView($id)	{        $model = $this->loadModel($id);        $issueDataProvider=new CActiveDataProvider('Issue',            array(                'criteria'=>array(                    'condition'=>'projectId = :projectId',                    'params'=>array(':projectId'=>$model->id),                ),                'pagination'=>array(                    'pageSize'=>1,                ),            ));        $this->render('view',array(            'model'=>$model,            'issueDataProvider'=>$issueDataProvider,        ));	}	/**	 * Creates a new model.	 * If creation is successful, the browser will be redirected to the 'view' page.	 */	public function actionCreate()	{		$model=new Project;		// Uncomment the following line if AJAX validation is needed		// $this->performAjaxValidation($model);		if(isset($_POST['Project']))		{			$model->attributes=$_POST['Project'];			if($model->save())				$this->redirect(array('view','id'=>$model->id));		}		$this->render('create',array(			'model'=>$model,		));	}	/**	 * Updates a particular model.	 * If update is successful, the browser will be redirected to the 'view' page.	 * @param integer $id the ID of the model to be updated	 */	public function actionUpdate($id)	{		$model=$this->loadModel($id);		// Uncomment the following line if AJAX validation is needed		// $this->performAjaxValidation($model);		if(isset($_POST['Project']))		{			$model->attributes=$_POST['Project'];			if($model->save())				$this->redirect(array('view','id'=>$model->id));		}		$this->render('update',array(			'model'=>$model,		));	}	/**	 * Deletes a particular model.	 * If deletion is successful, the browser will be redirected to the 'admin' page.	 * @param integer $id the ID of the model to be deleted	 */	public function actionDelete($id)	{		$this->loadModel($id)->delete();		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser		if(!isset($_GET['ajax']))			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));	}	/**	 * Lists all models.	 */	public function actionIndex()	{		$dataProvider=new CActiveDataProvider('Project');		$this->render('index',array(			'dataProvider'=>$dataProvider,		));	}	/**	 * Manages all models.	 */	public function actionAdmin()	{		$model=new Project('search');		$model->unsetAttributes();  // clear any default values		if(isset($_GET['Project']))			$model->attributes=$_GET['Project'];		$this->render('admin',array(			'model'=>$model,		));	}	/**	 * Returns the data model based on the primary key given in the GET variable.	 * If the data model is not found, an HTTP exception will be raised.	 * @param integer $id the ID of the model to be loaded	 * @return Project the loaded model	 * @throws CHttpException	 */	public function loadModel($id)	{        $model=$this->findModelById($id);        if($model===null)			throw new CHttpException(404,'The requested page does not exist.');		return $model;	}    /**     * Find the model by its ID number     * @param integer $id the primary identifier of the associated model     * @return Project the return model     */    private function findModelById($id)    {        return Project::model()->findByPk($id);    }	/**	 * Performs the AJAX validation.	 * @param Project $model the model to be validated	 */	protected function performAjaxValidation($model)	{		if(isset($_POST['ajax']) && $_POST['ajax']==='project-form')		{			echo CActiveForm::validate($model);			Yii::app()->end();		}	}    /* ************************************************************************     *     * f-project.net implementation properties and methods are after this block     *     *********************************************************************** */    /**     * Provides a form so that project administrators can     * associate other users to the project     */    public function actionAssignUser($id)    {        $project = $this->loadModel($id);        if (!Yii::app()->user->checkAccess('ProjectAssignUser', array('project' => $project))) {            throw new CHttpException(403, 'You are not authorized to perform this action.');        }        $assignmentModel = new ProjectUserAssignment();        // collect user input data        if (isset($_POST['ProjectUserAssignment'])) {            $assignmentModel->attributes = $_POST['ProjectUserAssignment'];            $assignmentModel->projectId = $project->id;            // validate user input            if ($assignmentModel->validate()) {                if ($assignmentModel->assignUser()) {                    Yii::app()->user->setFlash('success', $assignmentModel->userId . ' has been added to the project.');                    //reset the form for another user to be associated if desired                    $assignmentModel->unsetAttributes();                    $assignmentModel->clearErrors();                }            }        }        $this->render('assignUser', array('model' => $assignmentModel,'project'=>$project));    }    /**     * Get list data from project authorization roles, make it available for     * list controls in forms and views displaying (drop-down, options,...)     *     * @return array The list data from project authorization roles.     */    public function getAssignableRoleListData()    {        $allRoles = Yii::app()->authManager->getRoles();        $roles = array();        foreach($allRoles as $role)        {            if('Project' === substr($role->name,0,7))            {                $roles[]=array('id'=>$role->name,'name'=>Yii::t('fproject',$role->name));            }        }        return CHtml::listData($roles, 'id', 'name');    }    /**     * Get list data from project's assignment available users, make it available for     * list controls in forms and views displaying (drop-down, options,...)     *     * @return array The list data from project's assignment available users.     */    public function getAssignableUserListData()    {        $users=User::model()->findAll();        return CHtml::listData($users, 'id', 'username');    }}